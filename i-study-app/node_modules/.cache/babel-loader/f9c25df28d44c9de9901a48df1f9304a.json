{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILED, LOGOUT_SUCCESS, GET_USER_PROFILE_REQUEST, GET_USER_PROFILE_FAILED, GET_USER_PROFILE_SUCCESS, GET_USER_LIST_SUCCESS, GET_USER_LIST_REQUEST, GET_USER_LIST_FAILED, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILED, UPDATE_USER_PROFILE_REQUEST, UPDATE_USER_PROFILE_SUCCESS, UPDATE_USER_PROFILE_FAILED, VERIFY_TOKEN_REQUEST, VERIFY_TOKEN_SUCCESS, VERIFY_TOKEN_FAILED } from \"../reducers/user\";\nimport * as userService from \"../services/userService\";\nimport * as studentService from \"../services/studentService\";\nimport * as teacherService from \"../services/teacherService\";\nimport * as userSelectors from \"../selectors/user\";\nimport { USER_TYPE_NUMBER } from \"../utilities/constants\";\nexport const login = payload => async (dispatch, getState) => {\n  dispatch(LOGIN_REQUEST());\n\n  try {\n    const {\n      username,\n      password\n    } = payload;\n    const {\n      status,\n      data\n    } = await userService.login(username, password);\n\n    if (status === 200) {\n      localStorage.setItem(\"accessToken\", data.jwt);\n      dispatch(LOGIN_SUCCESS(data));\n    } else {\n      dispatch(LOGIN_FAILED());\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch(LOGIN_FAILED());\n  }\n};\nexport const verifyToken = () => async dispatch => {\n  dispatch(VERIFY_TOKEN_REQUEST());\n\n  try {\n    const {\n      data,\n      status\n    } = await userService.verifyToken();\n    console.log(data);\n\n    if (status === 200) {\n      dispatch(VERIFY_TOKEN_SUCCESS());\n    } else dispatch(VERIFY_TOKEN_FAILED());\n  } catch (error) {\n    dispatch(VERIFY_TOKEN_FAILED());\n  }\n};\nexport const getUserProfile = () => async (dispatch, getState) => {\n  dispatch(GET_USER_PROFILE_REQUEST());\n\n  try {\n    const {\n      data,\n      status\n    } = await userService.getUserInfo();\n\n    if (status === 200) {\n      dispatch(GET_USER_PROFILE_SUCCESS(data));\n    } else dispatch(GET_USER_PROFILE_FAILED());\n  } catch (error) {\n    dispatch(GET_USER_PROFILE_FAILED());\n  }\n};\nexport const getUserList = () => async (dispatch, getState) => {\n  dispatch(GET_USER_LIST_REQUEST());\n\n  try {\n    const {\n      data,\n      status\n    } = await userService.getUserList();\n\n    if (status === 200) {\n      dispatch(GET_USER_LIST_SUCCESS(data));\n    } else dispatch(GET_USER_LIST_FAILED());\n  } catch (error) {\n    dispatch(GET_USER_LIST_FAILED());\n  }\n};\nexport const register = payload => async (dispatch, getState) => {\n  dispatch(REGISTER_USER_REQUEST());\n\n  try {\n    const {\n      userType\n    } = payload;\n\n    if (userType === USER_TYPE_NUMBER.TEACHER) {\n      const {\n        data,\n        status\n      } = await userService.registerTeacher(payload);\n\n      if (status === 201) {\n        dispatch(REGISTER_USER_SUCCESS());\n      } else dispatch(REGISTER_USER_FAILED());\n    }\n\n    if (userType === USER_TYPE_NUMBER.STUDENT) {\n      const {\n        data,\n        status\n      } = await userService.registerStudent(payload);\n\n      if (status === 201) {\n        dispatch(REGISTER_USER_SUCCESS());\n      } else dispatch(REGISTER_USER_FAILED());\n    }\n  } catch (error) {\n    dispatch(REGISTER_USER_FAILED());\n  }\n};\nexport const updateUserProfile = payload => async (dispatch, getState) => {\n  const state = getState();\n  const user = userSelectors.getUser(state);\n  const auth = userSelectors.getUser(user);\n  const userType = userSelectors.getUserType(auth);\n  dispatch(UPDATE_USER_PROFILE_REQUEST());\n\n  try {\n    if (userType === USER_TYPE_NUMBER.TEACHER) {\n      const teacherId = userSelectors.getTeacherId(auth);\n      const {\n        data,\n        status\n      } = await teacherService.updateTeacherProfile({\n        teacherId,\n        ...payload\n      });\n\n      if (status === 200) {\n        dispatch(UPDATE_USER_PROFILE_SUCCESS());\n        dispatch(getUserProfile());\n      } else dispatch(UPDATE_USER_PROFILE_FAILED());\n    }\n\n    if (userType === USER_TYPE_NUMBER.STUDENT) {\n      const studentId = userSelectors.getStudentId(auth);\n      const {\n        data,\n        status\n      } = await studentService.updateStudentProfile({\n        studentId,\n        ...payload\n      });\n\n      if (status === 200) {\n        dispatch(UPDATE_USER_PROFILE_SUCCESS());\n        dispatch(getUserProfile());\n      } else dispatch(UPDATE_USER_PROFILE_FAILED());\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch(UPDATE_USER_PROFILE_FAILED());\n  }\n};\nexport const logout = () => async (dispatch, getState) => {\n  localStorage.removeItem(\"accessToken\");\n  dispatch(LOGOUT_SUCCESS());\n};","map":{"version":3,"sources":["C:/Users/Wen Jie/Folder/i-study/i-study-app/src/thunks/user.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILED","LOGOUT_SUCCESS","GET_USER_PROFILE_REQUEST","GET_USER_PROFILE_FAILED","GET_USER_PROFILE_SUCCESS","GET_USER_LIST_SUCCESS","GET_USER_LIST_REQUEST","GET_USER_LIST_FAILED","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","UPDATE_USER_PROFILE_REQUEST","UPDATE_USER_PROFILE_SUCCESS","UPDATE_USER_PROFILE_FAILED","VERIFY_TOKEN_REQUEST","VERIFY_TOKEN_SUCCESS","VERIFY_TOKEN_FAILED","userService","studentService","teacherService","userSelectors","USER_TYPE_NUMBER","login","payload","dispatch","getState","username","password","status","data","localStorage","setItem","jwt","error","console","log","verifyToken","getUserProfile","getUserInfo","getUserList","register","userType","TEACHER","registerTeacher","STUDENT","registerStudent","updateUserProfile","state","user","getUser","auth","getUserType","teacherId","getTeacherId","updateTeacherProfile","studentId","getStudentId","updateStudentProfile","logout","removeItem"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILED,\r\n  LOGOUT_SUCCESS,\r\n  GET_USER_PROFILE_REQUEST,\r\n  GET_USER_PROFILE_FAILED,\r\n  GET_USER_PROFILE_SUCCESS,\r\n  GET_USER_LIST_SUCCESS,\r\n  GET_USER_LIST_REQUEST,\r\n  GET_USER_LIST_FAILED,\r\n  REGISTER_USER_REQUEST,\r\n  REGISTER_USER_SUCCESS,\r\n  REGISTER_USER_FAILED,\r\n  UPDATE_USER_PROFILE_REQUEST,\r\n  UPDATE_USER_PROFILE_SUCCESS,\r\n  UPDATE_USER_PROFILE_FAILED,\r\n  VERIFY_TOKEN_REQUEST,\r\n  VERIFY_TOKEN_SUCCESS,\r\n  VERIFY_TOKEN_FAILED,\r\n} from \"../reducers/user\";\r\nimport * as userService from \"../services/userService\";\r\nimport * as studentService from \"../services/studentService\";\r\nimport * as teacherService from \"../services/teacherService\";\r\nimport * as userSelectors from \"../selectors/user\";\r\nimport { USER_TYPE_NUMBER } from \"../utilities/constants\";\r\n\r\nexport const login = (payload) => async (dispatch, getState) => {\r\n  dispatch(LOGIN_REQUEST());\r\n  try {\r\n    const { username, password } = payload;\r\n    const { status, data } = await userService.login(username, password);\r\n    if (status === 200) {\r\n      localStorage.setItem(\"accessToken\", data.jwt);\r\n      dispatch(LOGIN_SUCCESS(data));\r\n    } else {\r\n      dispatch(LOGIN_FAILED());\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(LOGIN_FAILED());\r\n  }\r\n};\r\n\r\nexport const verifyToken = () => async (dispatch) => {\r\n  dispatch(VERIFY_TOKEN_REQUEST());\r\n  try {\r\n    const { data, status } = await userService.verifyToken();\r\n    console.log(data);\r\n    if (status === 200) {\r\n      dispatch(VERIFY_TOKEN_SUCCESS());\r\n    } else dispatch(VERIFY_TOKEN_FAILED());\r\n  } catch (error) {\r\n    dispatch(VERIFY_TOKEN_FAILED());\r\n  }\r\n};\r\n\r\nexport const getUserProfile = () => async (dispatch, getState) => {\r\n  dispatch(GET_USER_PROFILE_REQUEST());\r\n  try {\r\n    const { data, status } = await userService.getUserInfo();\r\n    if (status === 200) {\r\n      dispatch(GET_USER_PROFILE_SUCCESS(data));\r\n    } else dispatch(GET_USER_PROFILE_FAILED());\r\n  } catch (error) {\r\n    dispatch(GET_USER_PROFILE_FAILED());\r\n  }\r\n};\r\n\r\nexport const getUserList = () => async (dispatch, getState) => {\r\n  dispatch(GET_USER_LIST_REQUEST());\r\n  try {\r\n    const { data, status } = await userService.getUserList();\r\n\r\n    if (status === 200) {\r\n      dispatch(GET_USER_LIST_SUCCESS(data));\r\n    } else dispatch(GET_USER_LIST_FAILED());\r\n  } catch (error) {\r\n    dispatch(GET_USER_LIST_FAILED());\r\n  }\r\n};\r\n\r\nexport const register = (payload) => async (dispatch, getState) => {\r\n  dispatch(REGISTER_USER_REQUEST());\r\n  try {\r\n    const { userType } = payload;\r\n    if (userType === USER_TYPE_NUMBER.TEACHER) {\r\n      const { data, status } = await userService.registerTeacher(payload);\r\n\r\n      if (status === 201) {\r\n        dispatch(REGISTER_USER_SUCCESS());\r\n      } else dispatch(REGISTER_USER_FAILED());\r\n    }\r\n    if (userType === USER_TYPE_NUMBER.STUDENT) {\r\n      const { data, status } = await userService.registerStudent(payload);\r\n\r\n      if (status === 201) {\r\n        dispatch(REGISTER_USER_SUCCESS());\r\n      } else dispatch(REGISTER_USER_FAILED());\r\n    }\r\n  } catch (error) {\r\n    dispatch(REGISTER_USER_FAILED());\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = (payload) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const user = userSelectors.getUser(state);\r\n  const auth = userSelectors.getUser(user);\r\n  const userType = userSelectors.getUserType(auth);\r\n  dispatch(UPDATE_USER_PROFILE_REQUEST());\r\n  try {\r\n    if (userType === USER_TYPE_NUMBER.TEACHER) {\r\n      const teacherId = userSelectors.getTeacherId(auth);\r\n      const { data, status } = await teacherService.updateTeacherProfile({\r\n        teacherId,\r\n        ...payload,\r\n      });\r\n\r\n      if (status === 200) {\r\n        dispatch(UPDATE_USER_PROFILE_SUCCESS());\r\n        dispatch(getUserProfile());\r\n      } else dispatch(UPDATE_USER_PROFILE_FAILED());\r\n    }\r\n    if (userType === USER_TYPE_NUMBER.STUDENT) {\r\n      const studentId = userSelectors.getStudentId(auth);\r\n      const { data, status } = await studentService.updateStudentProfile({\r\n        studentId,\r\n        ...payload,\r\n      });\r\n\r\n      if (status === 200) {\r\n        dispatch(UPDATE_USER_PROFILE_SUCCESS());\r\n        dispatch(getUserProfile());\r\n      } else dispatch(UPDATE_USER_PROFILE_FAILED());\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(UPDATE_USER_PROFILE_FAILED());\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch, getState) => {\r\n  localStorage.removeItem(\"accessToken\");\r\n  dispatch(LOGOUT_SUCCESS());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}