{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../store\";\nimport { logout } from \"../thunks/user\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:3000/\",\n  timeout: 10000\n});\ninstance.interceptors.request.use(function (config) {\n  const token = localStorage.getItem(\"accessToken\");\n  config.headers[\"Authorization\"] = token ? `Bearer ${token}` : \"\";\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n}); // Add a response interceptor\n\ninstance.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (error.response.status === 403 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const {\n      data\n    } = await refreshAccessToken();\n    config.headers[\"Authorization\"] = token ? `Bearer ${token}` : \"\";\n    return axiosApiInstance(originalRequest);\n  }\n\n  const {\n    status\n  } = error.response;\n\n  if (status === 401 || status === 403) {\n    store.dispatch(logout());\n  } // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n\n\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["C:/Users/Wen Jie/Folder/i-study/i-study-app/src/services/httpService.js"],"names":["axios","store","logout","instance","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","data","refreshAccessToken","axiosApiInstance","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,wBADmB;AAE5BC,EAAAA,OAAO,EAAE;AAFmB,CAAb,CAAjB;AAKAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAAUC,MAAV,EAAkB;AAChB,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAkCH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAA9D;AACA,SAAOD,MAAP;AACD,CALH,EAME,UAAUK,KAAV,EAAiB;AACf;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CATH,E,CAYA;;AACAZ,QAAQ,CAACI,YAAT,CAAsBW,QAAtB,CAA+BT,GAA/B,CACE,UAAUS,QAAV,EAAoB;AAClB;AACA;AACA,SAAOA,QAAP;AACD,CALH,EAME,gBAAgBH,KAAhB,EAAuB;AACrB,QAAMI,eAAe,GAAGJ,KAAK,CAACL,MAA9B;;AACA,MAAIK,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAC5DF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMC,kBAAkB,EAAzC;AACAb,IAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAkCH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAA9D;AACA,WAAOa,gBAAgB,CAACL,eAAD,CAAvB;AACD;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAaL,KAAK,CAACG,QAAzB;;AACA,MAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCnB,IAAAA,KAAK,CAACwB,QAAN,CAAevB,MAAM,EAArB;AACD,GAXoB,CAYrB;AACA;;;AAEA,SAAOc,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAtBH;AAyBA,eAAeZ,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport store from \"../store\";\r\nimport { logout } from \"../thunks/user\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:3000/\",\r\n  timeout: 10000,\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    config.headers[\"Authorization\"] = token ? `Bearer ${token}` : \"\";\r\n    return config;\r\n  },\r\n  function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  function (response) {\r\n    // Any status code that lie within the range of 2xx cause this function to trigger\r\n    // Do something with response data\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 403 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const { data } = await refreshAccessToken();\r\n      config.headers[\"Authorization\"] = token ? `Bearer ${token}` : \"\";\r\n      return axiosApiInstance(originalRequest);\r\n    }\r\n    const { status } = error.response;\r\n    if (status === 401 || status === 403) {\r\n      store.dispatch(logout());\r\n    }\r\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n    // Do something with response error\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}